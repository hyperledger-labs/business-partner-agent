{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

This chart will install a business partner agent (bpa-core & bpa-acapy) and Postgres.

It will also create the default ingress routes.

## TL;DR

```sh
helm repo add bpa https://hyperledger-labs.github.io/business-partner-agent/
helm repo update
helm upgrade \
	--set global.ingressSuffix=.example.com \
   	mybpa bpa/bpa -i -n mynamespace --devel
```

## Introduction

This chart bootstraps a business partner agent deployment on a Kubernetes cluster using the Helm package manager. 
Its default installation comes with PostgreSQL. 
Ingress routes are generated and activated, allowing the agent to communicate with other agents outside the cluster.

## Requirements

- Kubernetes 1.12+
- Docker
- Helm v3.3.4+
- PV provisioner support in the underlying infrastructure (for PostgreSQL persistence)
- If activating Ingress (with is the default!):
  - Ingress controller installed
  - Cert-manager (TLS required/assumed for both endpoint: public profile and acapy)
  - DNS records pointing to your routes  

## Initial preparation

The following steps have to be done only once.

## Installing the chart

To install the chart with the release name `bpa` and generated ingress as subdomains of `example.com` in the namespace `mynamespace`

```sh
helm repo add bpa https://hyperledger-labs.github.io/business-partner-agent/
helm repo update
helm upgrade \
	--set global.ingressSuffix=.example.com \
   	mybpa bpa/bpa -i -n mynamespace --devel
```

Get the generated application URL by running `kubectl`
```sh
kubectl get ingress -n mynamespace
```

Like this we deployed the BPA (bpa-core & bpa-acapy) and Postgres on the Kubernetes cluster in the default configuration. The [Values](#Values) section list the parameters that can be configured during installation.

#### Install chart with values file

Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart.
E.g. deploying the chart to the IDunion network could be done as follows.

Remark: 
In IDunion the DID cannot be autogenerated, therefore a seed has to be configured as pre-requisite.
To do so, create a secret in the same namespace named `<helm release>-acapy` and a key called `seed`.

Create a yaml file. 
```yaml
cat <<EOT >> values-mybpa.yaml
global:
  ingressSuffix: .example.com
bpa: 
    config:
      name: My BPA      
      bootstrap:
        username: alice
        password: changeme
      ledger:
        browser: https://explorer.idu.network
      did: 
        prefix: "did:sov:idu:" 
      schemas:
        bank-account:
          id: "UmZ25DANwS6ngGWB4ye4tN:2:BankAccount:0.1"
          label: "Bank Account"
          defaultAttributeName: "iban"
          restrictions:
            - issuerDid: "did:sov:idu:UmZ25DANwS6ngGWB4ye4tN"
              label: "Demo Bank"
        commercial-register:
          id: "R6WR6n7CQVDjvvmwofHK6S:2:commercialregister:0.1"
          label: "Commercial Register"
          defaultAttributeName: "companyName"
          restrictions:
            - issuerDid: "did:sov:idu:R6WR6n7CQVDjvvmwofHK6S"
              label: "Commercial Register"   
acapy:
  agentName: mybpa
     
postgresql:
  persistence:
    enabled: true
    storageClass: default
    size: 1Gi
EOT
```

Install the chart with the release name `mybpa`, in the namespace `mynamespace`.


```sh
helm upgrade \
	--values values-mybpa.yaml \
   	mybpa bpa/bpa -i -n mynamespace --devel  
```
#### Install multiple bpa instances

> You could easily deploy a second business partner agent like this, e.g. for demo purpose.
> Just use a different helm release name, the seed of another DID and different ingress host names.

#### Install in local development cluster

No special handling, should work the same way as with a remote cluster.
With minikube you would

Install and run minikube (see also minikube [documentation](https://minikube.sigs.k8s.io/docs/start/))
```sh
 curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
 sudo install minikube-linux-amd64 /usr/local/bin/minikube  
 minikube start --vm-driver=docker

```

Install the chart
```sh
helm upgrade \
	--values values-mybpa.yaml \
   	mybpa bpa/bpa -i -n mynamespace --devel  
```

## Uninstalling the Chart

To uninstall/delete the my-release deployment:

```sh
helm delete mybpa
```

The command removes all the Kubernetes components but PVC's associated with the chart and deletes the release.

To delete the PVC's associated with my-release:

```sh
kubectl delete pvc -l release=mybpa
```

Note: Deleting the PVC's will delete postgresql data as well. Please be cautious before doing it.

{{ template "chart.valuesSection" . }}

## Chart dependencies
{{ template "chart.requirementsTable" . }}

## Chart development

### Publish chart(s)

See [publishing docu](../../PUBLISHING.md).

### Documentation 

The chart documentation is generated via `helm-docs` out of a go template.

```sh
cd charts
docker run --rm --volume "$(pwd):/helm-docs" -u $(id -u) jnorwood/helm-docs:latest
```

{{ template "chart.maintainersSection" . }}

{{ template "helm-docs.versionFooter" . }}