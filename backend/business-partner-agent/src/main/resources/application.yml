micronaut:
  application:
    name: bpa
    instance:
      id: ${random.shortuuid}
  server:
    port: 8080
    cors:
      enabled: true # potential security risk
    idle-timeout: 30m
  security:
    authentication: session
    endpoints:
      logout:
        path: /api/logout
        get-allowed: true
    redirect:
      unauthorized:
        url: /user/signin
      login-failure: /user/authFailed
      logout: /user/signin
    intercept-url-map:
      -
        pattern: /**
        access:
          - isAuthenticated()
  session:
    max-inactive-interval: 12h
  router:
    # note also check the AppController
    static-resources:
      swagger:
        enabled: true
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**
      frontend:
        paths: classpath:public
        mapping: /**
  caches:
    '*':
      maximum-size: 5000
    ur-cache:
      expire-after-write: 300s
    partner-lookup-cache:
      expire-after-write: 180s
    did-lookup-cache:
      expire-after-write: 3600s
    schema-attr-cache:
      expire-after-write: 1d
    schema-label-cache:
      expire-after-write: 1d
  executors:
    io:
      type: fixed
      nThreads: 25
    scheduled:
      type: scheduled
      core-pool-size: 5

endpoints:
  all:
    enabled: false
  health:
    enabled: true
    sensitive: false
    details-visible: never

datasources:
  '*':
    url: ${bpa.pg.url}
    driver-class-name: org.postgresql.Driver
    username: ${bpa.pg.username}
    password: ${bpa.pg.password}
    dialect: POSTGRES
    schema: ${bpa.pg.schema}
    initialization-fail-timeout: -1 # wait forever until the db is ready

flyway:
  datasources:
    '*':
      locations: classpath:databasemigrations
      schemas: ${bpa.pg.schema}

jackson:
  serialization-inclusion: NON_ABSENT # Omit null and Optional.empty(), but include empty collections
  serialization:
    indent-output: false
  deserialization:
    failOnUnknownProperties: false
    acceptEmptyStringAsNullObject: true
    acceptEmptyArrayAsNullObject: true
  json-view:
    enabled: true
  mapper:
    acceptCaseInsensitiveEnums: true

bpa:
  docker:
    #host where containers are running: typically localhost but might be an IP as well
    host: localhost
  resolver:
    url: ${BPA_RESOLVER_URL:`https://resolver.stage.economyofthings.io`}
  ledger:
    browser: ${BPA_LEDGER_BROWSER:}
  host: localhost:${micronaut.server.port}
  name: ${AGENT_NAME:`Business Partner Agent`}
  scheme: https
  web:
    only: ${BPA_WEB_MODE:false}
  acapy:
    url: http://${bpa.docker.host}:8031
    apiKey: empty
    endpoint: ${ACAPY_ENDPOINT:`http://localhost:8030`}
  did:
    prefix: ${BPA_DID_PREFIX:`did:sov:iil:`}
  pg:
    url: jdbc:postgresql://${bpa.docker.host}/${bpa.pg.username}
    username: walletuser
    password: walletpassword
    schema: public
  bootstrap:
    username: ${BPA_BOOTSTRAP_UN:admin}
    password: ${BPA_BOOTSTRAP_PW:changeme}
  schemas:
    #test ledger schemas, can be overwritten / extended when e.g. working with other ledger
    bank-account:
      id: "M6Mbe3qx7vB4wpZF4sBRjt:2:bank_account:1.0"
      label: "Bank Account"
      defaultAttributeName: "iban"
      # Note: this also works json style restrictions: [{id: 123, label: myLabel}]
      restrictions:
        - issuerDid: "${bpa.did.prefix}M6Mbe3qx7vB4wpZF4sBRjt"
          label: "Demo Bank"
    commercial-register:
      id: "5mwQSWnRePrZ3oF67C4KqD:2:commercialregister:1.0"
      label: "Commercial Register"
      defaultAttributeName: "companyName"
      restrictions:
        - issuerDid: "${bpa.did.prefix}5mwQSWnRePrZ3oF67C4KqD"
          label: "Commercial Register"
  imprint:
    url: ${BPA_IMPRINT_URL:}
  privacy:
    policy:
      url: ${BPA_PRIVACY_POLICY_URL:}
  creddef:
    revocationRegistrySize: ${BPA_CREDDEF_REVOCATION_REGISTRY_SIZE:3000}
